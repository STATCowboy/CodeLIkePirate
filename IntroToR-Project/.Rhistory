# These examples below all do the same thing calculate the final grade for
# for each student using different techniques in R
#
classGrades <- read.table(header = TRUE, stringsAsFactors = FALSE ,text = "
name Test Score
Jamey MidTerm 40
Jamey Project 50
Jamey Final 30
Melanie MidTerm 100
Melanie Project 100
Melanie Final 100
Kevin MidTerm 95
Kevin Project 98
Kevin Final 92
Ken MidTerm 80
Ken Project 90
Ken Final 70
")
mean(classGrades$Score)
#
# Option 1
# Pivot via Spread and apply
#
classGrades.FinalGrade <- spread(classGrades, Test, Score)
View(classGrades.FinalGrade)
View(classGrades)
classGrades.FinalGrade$FinalGrade <- apply(classGrades.FinalGrade[,2:4],1,mean)
classGrades.FinalGrade
#
# Option 5 (sqldf)
#
library(sqldf)
sel <- "select name, 'FinalGrade' as Test, avg(Score) as Score
from classGrades
group by name"
classGrades.FinalGrade <- sqldf(sel)
classGrades.FinalGrade
classGrades.FinalGrade <- rbind(classGrades, classGrades.FinalGrade)
classGrades.FinalGrade
classGrades.FinalGrade <-
classGrades.FinalGrade[order(classGrades.FinalGrade$name),]
classGrades.FinalGrade
# Let's Start Fresh (remove all objects in R Session)
rm (list=ls())
# Turn off warnings
options(warn=-1)
#
# Basics
#
m <- 3 * 5
m
# Let's Start Fresh (remove all objects in R Session)
rm (list=ls())
clear
cls()
clear()
# Let's Start Fresh (remove all objects in R Session)
rm (list=ls())
m
m<-5
# Let's Start Fresh (remove all objects in R Session)
rm (list=ls())
# Turn off warnings
options(warn=-1)
#
# Basics
#
m <- 3 * 5
m
# c (combine) function to create a Vector
v <- c(2, 3, 1.5, 3.1, 49)
v
# seq function generates numeric sequences
s <- seq(from = 0, to = 100, by = .1)
s
# rep function replicates values
r <- rep(c(1,4), times = 4)
r
# : creates a number sequence incremented by 1 or -1
colon <- 1:10
print(colon)
# length of vector
length(colon)
# sort vectors
s <- c(2,3,4,1,10,8,9,7,6,0,5)
s
s2 <- sort(s)
s2
m1 <- matrix(1, nr = 4, nc = 4)
m2 <- matrix(2, nr = 4, nc = 4)
m1
m2
rbind(m1, m2)
cbind(m1, m2)
#Product of two matrices is `%*%'.
rbind(m1, m2) %*% cbind(m1, m2)
cbind(m1, m2) %*% rbind(m1, m2)
df <- read.table(header = TRUE, stringsAsFactors=FALSE, text = "
id name sal
1 Jamey 100
2 Melanie 500
3 Kevin 150
4 Ken 150
5 Regan 100
6 Trey 100
7 Robyn 100
8 Stef 100
9 Sherri 400
10 Jimmy 300
11 Jamey 120
")
class(df)
View(df)
View(df)
# Column and Row Names
colnames(df)
rownames(df)
# Number of Rows in DF
nrow(df)
ncol(df)
# Reference Column in DF by name
df['name']
# e.g. Change salary to sal * 1.05 (5% raise) use $ reference
df$sal <- df$sal*1.05
View(df)
# Accessing by Row or Column number [row,column]
df[1,]  # row
df[1,3] # cell
df[,2]  # column
li <- list(m1, m2, colon, df)
print(li)
li[[2]]
li[[4]][1,]
# LM Example
View(anscombe)
# Build Linear Model
lmout <- lm(y3 ~ x3, data.frame(anscombe))
typeof(lmout)
# Output of lm is a class "lm"
class(lmout)
x <- c(1.2,2.3,3.4,NA)
print(x)
# Returns integer location of values (not the values)
n <- which (is.na(x))
v <- which (!is.na(x))
print(n)
print(v)
# y will be set to the values not = NA
y <- x[!is.na(x)]
print(y)
x
# Set missing values to mean of x
x[which (is.na(x))] <- mean(x[which(!is.na(x))])
x
# GGPlot2 Graph Example
# Load ggplot2 Package
library(ggplot2)
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
# Create Function to calculate Bonus
bonus <- function(sal)
{
bon <- sal * 1.05
return(bon)
}
# Create new DataFrame to compare old vs new Sals after Bonus Calc
dfBon <- df
# Run Function to Calculate Bonus
dfBon$sal <- bonus(dfBon$sal)
# View Data BEFORE Bonus
View(dfBon)
#
# Try/Catch
#
# http://adv-r.had.co.nz/Exceptions-Debugging.html
options(show.error.messages = TRUE)
results <- try("a" + "b")
print(results)
options(show.error.messages = FALSE)
results <- try("a" + "b")
print(results)
library(dygraphs)
library(fma)
library(forecast)
dygraph(pigs)
dygraph(pigs, main = "Monthly Pigs Slaughtered - Victoria") %>%  # PIPE
dyRangeSelector(dateWindow = c("1980-01-01", "1996-01-01"))
#
# Try/Catch
#
# http://adv-r.had.co.nz/Exceptions-Debugging.html
options(show.error.messages = TRUE)
library(dygraphs)
library(fma)
#
# Option 1
# Pivot via Spread and apply
#
classGrades.FinalGrade <- spread(classGrades, Test, Score)
#
# More Fun with List
#
# These examples below all do the same thing calculate the final grade for
# for each student using different techniques in R
#
classGrades <- read.table(header = TRUE, stringsAsFactors = FALSE ,text = "
name Test Score
Jamey MidTerm 40
Jamey Project 50
Jamey Final 30
Melanie MidTerm 100
Melanie Project 100
Melanie Final 100
Kevin MidTerm 95
Kevin Project 98
Kevin Final 92
Ken MidTerm 80
Ken Project 90
Ken Final 70
")
mean(classGrades$Score)
library(dplyr)
library(tidyr)
#
# Option 1
# Pivot via Spread and apply
#
classGrades.FinalGrade <- spread(classGrades, Test, Score)
View(classGrades.FinalGrade)
classGrades.FinalGrade
classGrades
classGrades.FinalGrade
classGrades.FinalGrade$FinalGrade <- apply(classGrades.FinalGrade[,2:4],1,mean)
classGrades.FinalGrade
classGrades.FinalGrade <- NULL
#
# Option 3
# Split by name into a list of data frames and use lapply (list apply)
#
classGrades.list <- split(classGrades, classGrades$name)
classGrades.list
class(classGrades.list)
class(classGrades.list[["Jamey"]])
# classGrades.FinalGrade <- sapply(classGrades.list, function(x) {mean(x$Score)})
classGrades.FinalGrade <-
as.data.frame(do.call("rbind",
lapply(classGrades.list,
function(x) {mean(x$Score)})))
classGrades.FinalGrade <-
cbind(names(classGrades.list), classGrades.FinalGrade)
rownames(classGrades.FinalGrade) <- NULL
names(classGrades.FinalGrade) <- c("name", "FinalGrade")
classGrades.FinalGrade
classGrades.FinalGrade <-
left_join(classGrades, classGrades.FinalGrade, by="name")
classGrades.FinalGrade
sel <- "select name, 'FinalGrade' as Test, avg(Score) as Score
from classGrades
group by name"
classGrades.FinalGrade <- sqldf(sel)
# Let's Start Fresh (remove all objects in R Session)
rm (list=ls())
# Turn off warnings
options(warn=-1)
#
# Basics
#
m <- 3 * 5
m
# c (combine) function to create a Vector
v <- c(2, 3, 1.5, 3.1, 49)
v
# seq function generates numeric sequences
s <- seq(from = 0, to = 100, by = .1)
s
# rep function replicates values
r <- rep(c(1,4), times = 4)
r
# : creates a number sequence incremented by 1 or -1
colon <- 1:10
print(colon)
# length of vector
length(colon)
# sort vectors
s <- c(2,3,4,1,10,8,9,7,6,0,5)
s
s2 <- sort(s)
s2
m1 <- matrix(1, nr = 4, nc = 4)
m2 <- matrix(2, nr = 4, nc = 4)
m1
m2
rbind(m1, m2)
cbind(m1, m2)
#Product of two matrices is `%*%'.
rbind(m1, m2) %*% cbind(m1, m2)
cbind(m1, m2) %*% rbind(m1, m2)
df <- read.table(header = TRUE, stringsAsFactors=FALSE, text = "
id name sal
1 Jamey 100
2 Melanie 500
3 Kevin 150
4 Ken 150
5 Regan 100
6 Trey 100
7 Robyn 100
8 Stef 100
9 Sherri 400
10 Jimmy 300
11 Jamey 120
")
View(df)
class(df)
View(df)
# Column and Row Names
colnames(df)
rownames(df)
# Number of Rows in DF
nrow(df)
ncol(df)
# Reference Column in DF by name
df['name']
f
# e.g. Change salary to sal * 1.05 (5% raise) use $ reference
df$sal <- df$sal*1.05
View(df)
# Accessing by Row or Column number [row,column]
df[1,]  # row
df[1,3] # cell
df[,2]  # column
li <- list(m1, m2, colon, df)
print(li)
names(li) <- c("m1","m2","colon","df")
print(li)
li[[2]]
li[[4]][1,]
li[['df']]
li[['df']][1,]
x <- c(1.2,2.3,3.4,NA)
print(x)
# Returns integer location of values (not the values)
n <- which (is.na(x))
v <- which (!is.na(x))
print(n)
print(v)
# y will be set to the values not = NA
y <- x[!is.na(x)]
print(y)
print(x)
# Set missing values to mean of x
x[which (is.na(x))] <- mean(x[which(!is.na(x))])
x
# List Packages already installed
library()
# GGPlot2 Graph Example
# Load ggplot2 Package
library(ggplot2)
qplot(gear, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=gear, main="Mileage by Gear Number",
xlab="", ylab="Miles per Gallon")
mtcars
rownames(mtcars)
mtcars
1:10 == 2
1:10 != 2
1:10 > 2
1:10 >= 2
1:10 < 2
1:10 <= 2
x <- 2
x > 1
print(x)
x <- 1:4
x
(x > 2) | (x <= 3)
(x > 2) & (x <= 3)
xor((x > 2), (x < 4))
0:5 %in% x
# IF Statements
x <- 4
if (x > 3) print("true") else print("false")
ifelse ((x > 3), print("true"), print("false"))
if(x > 3){
print("true")
} else if(x < 3){
print("false")
} else {
print("Don't Know!")
}
# FOR Loops
# Simple Loop outputting Vector
for(i in 1:10)
print(1:i)
# Loop through data frame and print row at a time
for (i in 1:nrow(df))
print(df[i,])
# WHILE Loops
i <- 1
while (i <= 10)
{
print(i)
i <- i + 1
}
# Create Function to calculate Bonus
bonus <- function(sal)
{
bon <- sal * 1.05
return(bon)
}
View(bonus)
# View Data BEFORE Bonus
View(df)
# Create new DataFrame to compare old vs new Sals after Bonus Calc
dfBon <- df
# Run Function to Calculate Bonus
dfBon$sal <- bonus(dfBon$sal)
# View Data BEFORE Bonus
View(dfBon)
t
t
#
# Try/Catch
#
# http://adv-r.had.co.nz/Exceptions-Debugging.html
options(show.error.messages = TRUE)
results <- try("a" + "b")
print(results)
options(show.error.messages = FALSE)
results <- try("a" + "b")
print(results)
#
# Write Sample Data to CSV File
#
View(mtcars)
write.csv(mtcars, file="mtcars.csv", append=FALSE, sep=",", col.names = TRUE)
setwd("c:\\users\jj\desktop")
write.csv(mtcars, file="mtcars.csv", append=FALSE, sep=",", col.names = TRUE)
#
# More Fun with List
#
# These examples below all do the same thing calculate the final grade for
# for each student using different techniques in R
#
classGrades <- read.table(header = TRUE, stringsAsFactors = FALSE ,text = "
name Test Score
Jamey MidTerm 40
Jamey Project 50
Jamey Final 30
Melanie MidTerm 100
Melanie Project 100
Melanie Final 100
Kevin MidTerm 95
Kevin Project 98
Kevin Final 92
Ken MidTerm 80
Ken Project 90
Ken Final 70
")
mean(classGrades$Score)
library(dplyr)
library(tidyr)
View(classGrades)
#
# Option 1
# Pivot via Spread and apply
#
classGrades.FinalGrade <- spread(classGrades, Test, Score)
classGrades.FinalGrade
classGrades.FinalGrade$FinalGrade <- apply(classGrades.FinalGrade[,2:4],1,mean)
classGrades.FinalGrade
classGrades.FinalGrade <- NULL
#
# Option 3
# Split by name into a list of data frames and use lapply (list apply)
#
classGrades.list <- split(classGrades, classGrades$name)
classGrades.list
class(classGrades.list)
class(classGrades.list[["Jamey"]])
# classGrades.FinalGrade <- sapply(classGrades.list, function(x) {mean(x$Score)})
classGrades.FinalGrade <-
as.data.frame(do.call("rbind",
lapply(classGrades.list,
function(x) {mean(x$Score)})))
classGrades.FinalGrade <-
cbind(names(classGrades.list), classGrades.FinalGrade)
rownames(classGrades.FinalGrade) <- NULL
names(classGrades.FinalGrade) <- c("name", "FinalGrade")
classGrades.FinalGrade
# Alternative (dplyr)
classGrades.FinalGrade <- arrange(classGrades.FinalGrade, name)
classGrades.FinalGrade
classGrades.FinalGrade <- NULL
#
# Option 5 (sqldf)
#
library(sqldf)
sel <- "select name, 'FinalGrade' as Test, avg(Score) as Score
from classGrades
group by name"
classGrades.FinalGrade <- sqldf(sel)
classGrades.FinalGrade
classGrades.FinalGrade <- rbind(classGrades, classGrades.FinalGrade)
classGrades.FinalGrade
classGrades.FinalGrade <-
classGrades.FinalGrade[order(classGrades.FinalGrade$name),]
classGrades.FinalGrade
clear()
clear
cls
install.packages(c("dplyr", "dygraphs", "fma", "forecast", "ggplot2", "RODBC", "sqldf", "tidyr"))
